import json
from time import time, sleep
from certification_service.kafka.consumer import consumer
from certification_service.kafka.producer import producer, delivery_report

# Kafka topic
TOPIC = "certification-status"

# Send a test message using your existing producer
def produce_test_message():
    """
    Sends a test message using the existing producer from the producer script.
    """
    payload = {
        "studentId": "12345",
        "courseId": "67890",
        "status": "success",
        "message": "Test message from Kafka Producer"
    }

    try:
        producer.produce(
            TOPIC,
            json.dumps(payload).encode('utf-8'),
            callback=delivery_report  # Use the callback from your producer script
        )
        producer.flush()  # Ensure the message is sent
        print(f"Produced test message to {TOPIC}: {payload}")
    except Exception as e:
        print(f"Error producing test message: {e}")

# Consume messages using your existing consumer
def consume_messages_with_existing_consumer(timeout=10):
    """
    Uses the existing consumer to consume messages from the topic.
    
    Args:
        timeout (int): The timeout in seconds for consuming messages.
    """
    consumer.subscribe([TOPIC])  # Subscribe to the topic
    print(f"Consumer subscribed to topic: {TOPIC}. Waiting for messages...")

    start_time = time()

    try:
        while time() - start_time < timeout:
            msg = consumer.poll(1.0)  # Poll for messages
            if msg is None:
                continue
            if msg.error():
                print(f"Error consuming message: {msg.error()}")
            else:
                # Successfully consumed message
                message = json.loads(msg.value().decode('utf-8'))
                print(f"Consumed message: {message}")
    except Exception as e:
        print(f"Error in consumer: {e}")
    finally:
        consumer.close()

# Main function to test Producer and Consumer
def main():
    """
    Main function to orchestrate the Producer and Consumer test.
    """
    try:
        # Send a test message
        produce_test_message()

        # Give the broker a moment to process the message
        sleep(2)

        # Consume messages from the topic
        consume_messages_with_existing_consumer()

    except Exception as e:
        print(f"Error in Kafka test: {e}")

if __name__ == "__main__":
    main()
