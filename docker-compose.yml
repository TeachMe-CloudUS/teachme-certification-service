services:
  app:
    build: .
    container_name: certification_service
    env_file:
      - .env
      - ./certification_service/.env
    environment:
      - MONGO_USERNAME=${MONGO_USERNAME}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
      - MONGO_DATABASE=${MONGO_DATABASE}
    ports:
      - "${APP_PORT}:5002"
    volumes:
      - ./certificates:/app/certificates
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - certification-service-network

  mongodb:
    image: mongo:latest
    container_name: certification_mongodb
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
      MONGO_COLLECTION_NAME: ${MONGO_COLLECTION_NAME}
      MONGO_USERNAME: ${MONGO_USERNAME}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh:ro
      - ./mongodb/mongod.conf:/etc/mongo/mongod.conf
    healthcheck:
      test: mongosh --quiet --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    command: ["mongod", "--config", "/etc/mongo/mongod.conf"]
    networks:
      - certification-service-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - certification-service-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL: PLAINTEXT
      KAFKA_LISTENER_NAME_INTERNAL: INSIDE
      KAFKA_LISTENER_PORT: 9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_INTERNAL_HOST: kafka
      KAFKA_LISTENER_INTERNAL_PORT: 9093
      KAFKA_LISTENER_EXTERNAL_HOST: kafka
      KAFKA_LISTENER_EXTERNAL_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - certification-service-network

  azurite:
    container_name: azurite
    image: mcr.microsoft.com/azure-storage/azurite:3.33.0
    environment:
      - AZURE_STORAGE_ACCOUNT_NAME=${AZURE_STORAGE_ACCOUNT_NAME}
      - AZURE_STORAGE_ACCOUNT_KEY=${AZURE_STORAGE_ACCOUNT_KEY}
      - BLOB_STORAGE_CONTAINER_NAME=${BLOB_STORAGE_CONTAINER_NAME}
      - BLOB_STORAGE_CONNECTION_STRING=${BLOB_STORAGE_CONNECTION_STRING}
    expose:
      - 10000
      - 10001
      - 10002
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    volumes:
      - blob-storage-volume:/data mcr.microsoft.com/azure-storage/azurite
    networks:
      - certification-service-network

volumes:
  kafka_data:
  zookeeper_data:
  blob-storage-volume:
  mongodb_data:
    driver: local

networks:
  certification-service-network:
    driver: bridge